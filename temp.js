let array = [7, 6, 15, 8];
array = [12, 10, 7, 6, 15, 8];

function sortByBits(arr) {
  /* 
  Для сортировки массива по битам будем использовать метод .sort()
  Метод .sort(compareFn) принимает на вход функцию, которая должна проводить сравнение каждой пары чисел в массиве.

  Эта функция должна выполнять сравнение пары чисел и возвращать -1, если первое число меньше чем второе,
  1, если первое число больше чем второе число, и ноль, если эти числа равны:

  function compareFn(a, b) {
  if (a is less than b by some ordering criterion) {
    return -1;
  }
  if (a is greater than b by the ordering criterion) {
    return 1;
  }
  // a must be equal to b
  return 0;
  }

  Передадим методу .sort() функцию (a, b) => a - b. Эта функция принимает на вход два элемента массива
  и вычитает из первого элемента второй элемент. В результате, функция будет возвращать либо положительное число,
  либо отрицательное, либо 0, если элементы массива равны.
  Рассмотрим пример:

                 a, b
  const array = [7, 6, 15, 8];

  Мы вызываем метод array.sort((a, b) => a - b)
  Мы передаем методу .sort функцию, которая принимает на вход a и b, два элемента массива. 
  Пусть это будет 7 и 6. Функция возвращает результат вычитания a - b, то есть 7 - 6 = 1
  Мы получили единицу. Это положительное число, значит по правилам сортировки при помощи метода .sort(),
  эти элементы массива поменяются местами:

  compareFunction(a, b) return value	sort order

  > 0	                                sort b before a
  < 0	                                sort a before b
  === 0	                                keep original order of a and b
  */
  arr.sort((a, b) => {
    // переведем первый элемент массива в двоичную сс
    const binaryA = a.toString(2);
    // удалим все нули из строки, представляющей число и приведем эту строку к числу с помощью оператора +
    const bitsCountA = +binaryA.replace(/0/g, '');
    // аналогично поступим с числом b
    const binaryB = b.toString(2);
    const bitsCountB = +binaryB.replace(/0/g, '');
    // если количество бит в первом и во втором числе одинаково, тогда будем сортировать их десятичные значения
    if (bitsCountA === bitsCountB) {
      return a - b;
    }
    // будем сортировать числа по количеству бит в каждом числе
    return bitsCountA - bitsCountB;
  });
  return arr;
}

sortByBits(array);
